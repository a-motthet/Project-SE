import React, { useState, useEffect } from "react";
import { FaEdit, FaTrash, FaUpload } from "react-icons/fa";
import mypic from "../images/2.jpg";
import { useParams } from "react-router-dom";
import axios from "axios";
import Axios from "axios";
import { useNavigate } from "react-router-dom";

const NotificationPopup = ({ onClose }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-25">
    <div className="bg-white rounded-lg p-6 shadow-lg w-80 text-center">
      <h2 className="text-color-b text-lg font-bold mb-2">üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
      <p className="text-color-b mb-4">‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</p>
      <button
        onClick={() => window.location.reload()}
        // onClick={() => onClose()}
        className="bg-color-b text-white px-4 py-2 rounded-md"
      >
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      </button>
    </div>
  </div>
);

const NotificationMessagePopup = ({ onClose }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-25">
    <div className="bg-white rounded-lg p-6 shadow-lg w-80 text-center">
      <h2 className="text-color-b text-lg font-bold mb-2">üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
      <p className="text-color-b mb-4">‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</p>
      <button
        onClick={() => window.location.reload()}
        // onClick={() => onClose()}
        className="bg-color-b text-white px-4 py-2 rounded-md"
      >
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      </button>
    </div>
  </div>
);

const PetProfile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [isDeleted, setIsDeleted] = useState(false);
  const [showDeletePopup, setShowDeletePopup] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [ShowNotificationMessage, setShowNotificationMessage] = useState(false);
  const [petName, setPetName] = useState("");
  const [petType, setPetType] = useState("");
  const [petSex, setPetSex] = useState("");
  const [petAge, setPetAge] = useState("2 ‡∏õ‡∏µ");
  const [petGene, setPetGene] = useState("");
  const [petDisease, setPetDisease] = useState("");
  const [petWeight, setPetWeight] = useState("");
  const [birthdate, setBirthdate] = useState("");
  const [note, setNote] = useState("‡∏ô‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏≠‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á ‡∏°‡∏≤‡∏£‡∏µ‡πà");
  const [editPetType, setEditPetType] = useState(petType);
  const [showWeightInput, setShowWeightInput] = useState(false);
  const [birthdateOption, setBirthdateOption] = useState("exact");
  const [selectedDay, setSelectedDay] = useState("");
  const [selectedMonth, setSelectedMonth] = useState("");
  const [selectedYear, setSelectedYear] = useState("2012"); /// hERE
  const [ageYears, setAgeYears] = useState("");
  const [ageMonths, setAgeMonths] = useState("");
  const [profilePic, setProfilePic] = useState(mypic);
  const [petNameToDelete, setPetNameToDelete] = useState("");
  const { id } = useParams(); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ id ‡∏à‡∏≤‡∏Å URL
  const [pet, setPet] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
  const [error, setError] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö Error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const [dbbirthdate, setDbbirthdate] = useState("");
  const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á Token
  const navigate = useNavigate();




  const delPet = () => {
    const token = localStorage.getItem("token");
    Axios.post(
      `http://localhost:3001/delpet/${id}`,
      {}, // No body needed
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    )
      .then((response) => {
        setShowDeletePopup(true); // ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
        setShowNotification(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        setIsDeleted(true);
        navigate("/Mypet");
      })
      .catch((error) => {
        console.error("Error deleting pet:", error);
        alert("Failed to delete pet.");
      });
  };

  const addPet = () => {
    const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Local Storage

    const formData = new FormData(); // ‡πÉ‡∏ä‡πâ FormData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
    formData.append("petName", petName);
    formData.append("petType", editPetType);    
    formData.append("petGene", petGene);
    formData.append("petSex", petSex);
    formData.append("petWeight", petWeight);
    formData.append("birthdate", dbbirthdate);
    formData.append("note", note);
    formData.append("petDisease", petDisease);
    formData.append("imageFile", profilePic); // profilePic ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ Base64

    Axios.post(`http://localhost:3001/pets/${id}`, formData, {
      headers: {
        Authorization: `Bearer ${token}`, // ‡πÅ‡∏ô‡∏ö Token ‡πÉ‡∏ô Header
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      },
    })
      .then(() => {
        console.log("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        setShowNotification(true);
        NotificationPopup(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      })
      .catch((error) => {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ", error);
        NotificationMessagePopup(
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
        NotificationMessagePopup(true); // ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      });
  };

  const calculateAge = (birthdate) => {
    const birth = new Date(birthdate);
    const today = new Date();

    let ageYears = today.getFullYear() - birth.getFullYear();
    let ageMonths = today.getMonth() - birth.getMonth();

    if (ageMonths < 0) {
      ageYears--;
      ageMonths += 13;
    }

    return { ageYears, ageMonths };
  };

  const toggleEditMode = () => {
    if (isEditing) {
    }
    setIsEditing(!isEditing);
  };

  const handleDelete = () => {
    if (petNameToDelete === petName) {
      setShowNotificationMessage(true);
      setShowDeletePopup(false);
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
  };

  const calculateAgeAndMonths = (birthdate) => {
    const birthDate = new Date(birthdate); // ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô Date object
    const today = new Date(); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    let years = today.getFullYear() - birthDate.getFullYear(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏µ
    let months = today.getMonth() - birthDate.getMonth(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏•‡πâ‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (months < 0 || (months === 0 && today.getDate() < birthDate.getDate())) {
      years--; // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡∏î‡∏•‡∏á 1 ‡∏õ‡∏µ
      months += 12; // ‡∏ö‡∏ß‡∏Å 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡∏á
    if (today.getDate() < birthDate.getDate()) {
      months--; // ‡∏•‡∏î‡∏•‡∏á 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    }

    return { years, months };
  };

  const handleProfilePicChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => setProfilePic(reader.result);
      reader.readAsDataURL(file);
    }
  };

  useEffect(() => {
    if (isDeleted) return;
    const fetchPet = async () => {
      try {
        const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á Token
        const response = await axios.get(`http://localhost:3001/pets/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const petData = response.data;
        setPet(response.data); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏ô State
        setPetName(petData[0].pet_name);
        setEditPetType(petData[0].pet_type);
        setPetSex(petData[0].pet_gender);
        setPetAge(petData[0].age);
        setPetGene(petData[0].pet_gene)
        setPetWeight(petData[0].pet_weight);
        setNote(petData[0].pet_description);
        setProfilePic(petData[0].pet_photo);
        setPetDisease(petData[0].pet_disease);
        const date = new Date(petData[0].pet_birthdate);
        setSelectedDay(date.getDate());
        setSelectedMonth(date.getMonth() + 1); // +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ getMonth ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
        setSelectedYear(date.getFullYear());
        const { years, months } = calculateAgeAndMonths(
          petData[0].pet_birthdate
        );
        setAgeMonths(months);
        setAgeYears(years);
      } catch (err) {
        console.error("Error fetching pets:", err);
      }
    };
    fetchPet();
  }, [isDeleted]);

  useEffect(() => {
    if (
      birthdateOption === "exact" &&
      selectedDay &&
      selectedMonth &&
      selectedYear
    ) {
      const formattedBirthdate = new Date(
        selectedYear,
        selectedMonth - 1,
        selectedDay
      );

      setBirthdate(formattedBirthdate.toLocaleDateString("th-TH")); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
      const { ageYears, ageMonths } = calculateAge(formattedBirthdate);
      const dbDate = formattedBirthdate.toISOString().split("T")[0];
      setDbbirthdate(dbDate);

      setPetAge(`${ageYears} ‡∏õ‡∏µ ${ageMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`);
    }
  }, [selectedDay, selectedMonth, selectedYear, birthdateOption]);

  useEffect(() => {
    if (birthdateOption === "approximate" && ageYears && ageMonths) {
      setPetAge(`${ageYears} ‡∏õ‡∏µ ${ageMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`);
    }
  }, [ageYears, ageMonths, birthdateOption]);

  if (error) {
    return <p className="text-red-500">{error}</p>;
  }

  if (!pet) {
    return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
  }

  const formatter = new Intl.DateTimeFormat("th-TH", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });

  const formatDate = (dateString) => {
    const options = { year: "numeric", month: "long", day: "numeric" }; // ‡πÄ‡∏ä‡πà‡∏ô 26 November 2024
    return new Date(dateString).toLocaleDateString("th-TH", options);
  };

  function calculatePetAge(birthDateString) {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô Date object
    const birthDate = new Date(birthDateString);
    const currentDate = new Date(); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
    let age = currentDate.getFullYear() - birthDate.getFullYear();
    const monthDifference = currentDate.getMonth() - birthDate.getMonth();
    const dayDifference = currentDate.getDate() - birthDate.getDate();

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
    if (monthDifference < 0 || (monthDifference === 0 && dayDifference < 0)) {
      age--;
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedBirthDate = formatter.format(birthDate);

    return {
      age,
      formattedBirthDate,
    };
  }

  const petInfo = calculatePetAge(pet[0].pet_birthdate);

  return (
    <div className="bg-[#EBE4F2]  flex flex-col items-start font-sans">
      <div className="container mx-auto p-8 flex flex-col items-center">
        <div className="p-9 bg-white rounded-lg shadow-xl flex flex-col lg:flex-row items-center w-full sm:w-3/5 lg:w-3/5">
          {/* Content Section */}
          <div className="lg:w-2/3 w-full lg:pr-8 flex flex-col items-start ">
            {!isEditing ? (
              <>
                <div className="bg-white w-11/12 lg:w-3/4 xl:w-2/3">
                  <p className="pl-8 pt-8 text-color-b text-3xl font-bold">
                    {pet[0].pet_name}
                  </p>
                  <div className="grid grid-cols-2 gap-8 mb-2 mt-4">
                    <div className="ml-8 text-color-b">
                      ‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_type}
                    </div>
                    <div className="text-color-b">
                      ‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå: {pet[0].pet_gender}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-8 mb-2">
                    <div className="ml-8 text-color-b">
                      ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {petInfo.age} ‡∏õ‡∏µ
                    </div>
                    <div className="text-color-b">
                      ‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_gene}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-8 mb-2">
                    <div className="ml-8 text-color-b">
                      ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß: {pet[0].pet_disease}
                    </div>
                    <div className="text-color-b ">
                      ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
                    </div>
                  </div>
                </div>
                {/* <h2 className="text-color-b text-2xl font-sans font-bold mb-6">
                  {pet[0].pet_name} :
                </h2>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_breed} ‡πÄ‡∏û‡∏®: {pet[0].pet_gender}
                </p>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {formatDate(pet[0].pet_birthdate)}
                </p>
                <p className="text-xl text-color-b font-sans">
                  ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {petInfo.age} ‡∏õ‡∏µ
                </p>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {pet[0].pet_weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
                </p>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  Note: {pet[0].pet_note || "-"}
                </p> */}
                <div className="flex space-x-2 w-full mt-20 items-end">
                  <button
                    onClick={toggleEditMode}
                    className="flex-1 bg-color-b text-white p-3 rounded-md"
                  >
                    <FaEdit className="inline mr-2" /> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  <button
                    onClick={() => setShowDeletePopup(true)}
                    className="flex-1 bg-color-b text-white p-3 rounded-md"
                  >
                    <FaTrash className="inline mr-2" /> ‡∏•‡∏ö
                  </button>
                </div>
              </>
            ) : (
              <>
                {/* Editing Form */}
                <h2 className="text-color-b text-lg font-sans font-bold mb-4">
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô
                </h2>
                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans ">
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>
                  <input
                    type="text"
                    value={petName}
                    onChange={(e) => setPetName(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>
                  <div className="flex space-x-6 ">
                    {["‡∏´‡∏°‡∏≤", "‡πÅ‡∏°‡∏ß"].map((type) => (
                      <button
                        key={type}
                        onClick={() => setEditPetType(type)}
                        className={`px-4 py-2 rounded-md ${
                          editPetType === type
                            ? "bg-color-b text-white"
                            : "bg-gray-200 text-gray-700"
                        }`}
                      >
                        {type}
                      </button>
                    ))}
                  </div>
                </div>
                <div className="w-full mb-4">
              <label className="block text-color-b mb-1 font-sans">
                ‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
              </label>
              <select
                value={petGene}
                onChange={(e) => setPetGene(e.target.value)}
                className="w-full p-3 border-2 border-gray-300 rounded-md"
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå</option>
                {editPetType === "‡∏´‡∏°‡∏≤" &&
                  [
                    "‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ",
                    "‡πÑ‡∏ó‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏ô",
                    "‡πÑ‡∏ã‡∏ö‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Æ‡∏±‡∏™‡∏Å‡∏µ‡πâ",
                    "‡πÑ‡∏ä‡∏ô‡∏µ‡∏™ ‡πÄ‡∏Ñ‡∏£‡∏™‡∏ï‡πå ‡πÅ‡∏Æ‡∏£‡πå‡πÄ‡∏•‡∏™",
                    "‡πÇ‡∏≠‡∏•‡∏î‡πå‡∏≠‡∏¥‡∏á‡∏•‡∏¥‡∏ä‡∏ä‡∏µ‡∏õ‡∏î‡πá‡∏≠‡∏Å",
                    "‡πÇ‡∏ó‡∏™‡∏∞‡∏≠‡∏¥‡∏ô‡∏∏",
                    "‡πÇ‡∏î‡πÇ‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏à‡∏ô‡∏ï‡∏¥‡πÇ‡∏ô",
                    "‡πÇ‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ô",
                    "‡πÇ‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏¥‡∏ô‡πÇ‡∏î",
                    "‡πÇ‡∏Å‡∏•‡πÄ‡∏î‡πâ‡∏ô ‡∏£‡∏µ‡∏ó‡∏£‡∏µ‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
                    "‡πÅ‡∏≠‡∏ü‡πÄ‡∏ü‡∏ô‡∏û‡∏¥‡∏ô‡πÄ‡∏ä‡∏≠‡∏£‡πå",
                    "‡πÅ‡∏à‡πá‡∏Ñ‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡πÄ‡∏ß‡∏™‡∏ï‡∏µ‡πâ ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏£‡πå",
                    "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏ü‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏î",
                    "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô ‡∏™‡∏õ‡∏¥‡∏ï‡∏ã‡πå",
                    "‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå ‡∏°‡∏≤‡∏™‡∏ó‡∏¥‡∏ü",
                    "‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå ‡∏ö‡∏π‡∏•‡∏î‡πá‡∏≠‡∏Å",
                    "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡∏™ ‡πÄ‡∏°‡∏≤‡∏ô‡πå‡πÄ‡∏ó‡∏ô‡∏î‡πá‡∏≠‡∏Å",
                    "‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏• ‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢ ‡πÄ‡∏ä‡∏û‡πÄ‡∏û‡∏¥‡∏£‡πå‡∏î",
                    "‡πÄ‡∏ã‡∏≤‡∏ó‡πå ‡πÅ‡∏≠‡∏ü‡∏£‡∏¥‡∏Å‡∏±‡∏ô ‡∏°‡∏≤‡∏™‡∏ó‡∏¥‡∏ü‡∏ü‡πå (‡∏ö‡∏±‡∏ß‡πÇ‡∏ö‡∏ß‡πå)",
                    "‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏≤‡∏£‡πå‡∏î",
                    "‡πÄ‡∏ä‡∏≤ ‡πÄ‡∏ä‡∏≤",
                    "‡πÄ‡∏ä‡∏ó‡πÅ‡∏•‡∏ô‡∏î‡πå ‡∏ä‡∏µ‡∏û‡∏î‡πá‡∏≠‡∏Å",
                    "‡πÄ‡∏ä‡∏î‡πÅ‡∏•‡∏ô‡∏î‡πå‡∏ä‡∏¥‡∏û‡∏î‡πä‡∏≠‡∏Å",
                    "‡πÄ‡∏à‡πÅ‡∏õ‡∏ô‡∏ô‡∏¥‡∏™ ‡∏™‡∏õ‡∏¥‡∏ï‡∏ã‡πå",
                    "‡πÄ‡∏à‡πÅ‡∏õ‡∏ô‡∏ô‡∏¥‡∏™ ‡∏ä‡∏¥‡∏ô",
                    "‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡∏£‡∏µ ‡∏ö‡∏•‡∏π ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡πÄ‡∏Ñ‡∏£‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡πÄ‡∏Ñ‡∏ô ‡∏Ñ‡∏≠‡∏£‡πå‡πÇ‡∏ã",
                    "‡πÄ‡∏Å‡∏£‡∏¢‡πå‡∏Æ‡∏≤‡∏ß‡∏î‡πå",
                    "‡πÄ‡∏Å‡∏£‡∏ó‡πÑ‡∏û‡∏£‡∏µ‡∏ô‡∏µ‡∏™",
                    "‡πÄ‡∏Å‡∏£‡∏ó‡πÄ‡∏ó‡∏≠‡∏£‡πå ‡∏™‡∏ß‡∏¥‡∏™‡∏™‡πå ‡πÄ‡∏°‡∏≤‡∏ô‡πå‡πÄ‡∏ó‡∏ô‡∏î‡πä‡∏≠‡∏Å",
                    "‡πÄ‡∏Å‡∏£‡∏ó‡πÄ‡∏î‡∏ô",
                    "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô‡∏ö‡∏π‡∏•‡∏•‡πå‡∏î‡πá‡∏≠‡∏Å",
                    "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô‡∏ö‡∏π‡∏•‡∏•‡∏µ‡πà",
                    "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô ‡∏û‡∏¥‡∏ó‡∏ö‡∏π‡∏•‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô ‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ‡∏™‡πÅ‡∏õ‡πÄ‡∏ô‡∏µ‡∏¢‡∏•",
                    "‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô ‡πÄ‡∏Å‡∏£‡∏¢‡πå‡∏Æ‡∏≤‡∏ß‡∏î‡πå",
                    "‡∏≠‡∏¥‡∏á‡∏•‡∏¥‡∏ä ‡∏ö‡∏π‡∏•‡∏•‡πå‡∏î‡πá‡∏≠‡∏Å",
                    "‡∏≠‡∏≤‡∏Ñ‡∏¥‡∏ï‡∏∞ ‡∏≠‡∏¥‡∏ô‡∏∏",
                    "‡∏≠‡∏±‡∏ü‡∏Å‡∏±‡∏ô ‡∏Æ‡∏≤‡∏ß‡∏ô‡∏î‡πå",
                    "‡∏≠‡∏•‡∏≤‡∏™‡∏Å‡∏±‡∏ô ‡∏°‡∏≤‡∏•‡∏≤‡∏°‡∏¥‡∏ß‡∏ó‡πå",
                    "‡∏™‡πÅ‡∏ï‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏ä‡∏£‡πå ‡∏ö‡∏π‡∏• ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏£‡πå",
                    "‡∏ß‡∏¥‡∏õ‡πÄ‡∏û‡πá‡∏ó",
                    "‡∏•‡∏≤‡∏ö‡∏£‡∏≤‡∏î‡∏≠‡∏£‡πå‡∏£‡∏µ‡∏ó‡∏£‡∏µ‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
                    "‡∏£‡πá‡∏≠‡∏ï‡πÑ‡∏ß‡πÄ‡∏•‡∏≠‡∏£‡πå",
                    "‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ",
                    "‡∏¢‡∏≠‡∏£‡πå‡∏Ñ‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡∏°‡∏¥‡πÄ‡∏ô‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡∏ô‡∏ä‡πå‡πÄ‡∏ä‡∏≠‡∏£‡πå",
                    "‡∏°‡∏≤‡πÄ‡∏°‡∏∞‡∏ä‡∏¥‡∏ö‡∏∞",
                    "‡∏°‡∏≠‡∏•‡∏ó‡∏µ‡∏™",
                    "‡∏°‡∏≠‡∏•‡∏ó‡∏¥‡∏û‡∏π",
                    "‡∏ü‡∏¥‡∏•‡πà‡∏≤ ‡∏ö‡∏£‡∏≤‡∏ã‡∏¥‡∏•‡πÄ‡∏•‡∏µ‡∏¢‡πÇ‡∏£‡πà",
                    "‡∏û‡πá‡∏≠‡∏°‡πÇ‡∏ö‡∏£‡∏Ñ ‡πÄ‡∏ß‡∏•‡πå‡∏ä ‡∏Ñ‡∏≠‡∏£‡πå‡∏Å‡∏µ‡πâ",
                    "‡∏û‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡πâ‡∏•",
                    "‡∏û‡∏¥‡∏ó‡∏ö‡∏π‡∏• ‡πÄ‡∏£‡∏î‡πÇ‡∏ô‡∏™",
                    "‡∏û‡∏¥‡∏ó‡∏ö‡∏π‡∏• ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡∏û‡∏¥‡∏ó‡∏ö‡∏π‡∏• ‡∏°‡∏≤‡∏™‡∏ó‡∏¥‡∏ü",
                    "‡∏õ‡∏≤‡∏õ‡∏¥‡∏¢‡∏≠‡∏á",
                    "‡∏õ‡∏±‡πä‡∏Å",
                    "‡∏õ‡∏±‡∏Å‡∏Å‡∏¥‡πà‡∏á",
                    "‡∏õ‡∏≠‡∏°‡πÄ‡∏°‡∏≠‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô",
                    "‡∏ö‡πá‡∏≠‡∏Å‡πÄ‡∏ã‡∏≠‡∏£‡πå",
                    "‡∏ö‡∏π‡∏•‡∏•‡πå‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡∏ö‡∏π‡∏•‡∏•‡πå‡∏î‡πá‡∏≠‡∏Å",
                    "‡∏ö‡∏π‡∏•‡∏°‡∏≤‡∏™‡∏ó‡∏¥‡∏ü‡∏ü‡πå",
                    "‡∏ö‡∏µ‡πÄ‡∏ß‡πà‡∏≠‡∏£‡πå ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡∏ö‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏¢‡∏≠‡∏£‡πå‡∏Ñ‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢",
                    "‡∏ö‡∏µ‡πÄ‡∏Å‡∏¥‡∏•",
                    "‡∏ö‡∏¥‡∏ä‡∏≠‡∏á ‡∏ü‡∏£‡∏¥‡πÄ‡∏ã‡πà",
                    "‡∏ö‡∏≤‡πÄ‡∏ã‡∏ô‡∏à‡∏¥",
                    "‡∏ö‡∏≤‡∏™‡πÄ‡∏ã‡πá‡∏ï ‡∏Æ‡∏≤‡∏ß‡∏î‡πå",
                    "‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡∏ß",
                    "‡∏ö‡∏≠‡∏™‡∏ï‡∏±‡∏ô ‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏£‡πå",
                    "‡∏ö‡∏≠‡∏£‡πå‡∏ã‡∏≠‡∏¢",
                    "‡∏ö‡∏•‡∏±‡∏î‡∏Æ‡∏≤‡∏ß‡∏î‡πå",
                    "‡∏ö‡∏£‡∏¥‡∏ï‡∏ó‡∏≤‡∏ô‡∏µ‡∏™‡πÅ‡∏õ‡πÄ‡∏ô‡∏µ‡∏¢‡∏•",
                    "‡∏ó‡∏¥‡πÄ‡∏ö‡∏ï‡∏±‡∏ô ‡∏°‡∏≤‡∏™‡∏ó‡∏¥‡∏ü‡∏ü‡πå",
                    "‡∏î‡∏±‡∏•‡πÄ‡∏°‡πÄ‡∏ä‡∏µ‡∏¢‡∏ô",
                    "‡∏î‡∏±‡∏ä‡∏ä‡∏∏‡∏ô",
                    "‡∏ã‡∏≤‡∏•‡∏π‡∏Å‡∏¥",
                    "‡∏ã‡∏≤‡∏°‡∏≠‡∏¢‡∏î‡πå",
                    "‡∏ä‡∏¥‡∏™‡∏∏",
                    "‡∏ä‡∏¥‡∏ß‡∏≤‡∏ß‡∏≤",
                    "‡∏ä‡∏¥‡∏ö‡∏∞ ‡∏≠‡∏¥‡∏ô‡∏∏",
                    "‡∏ä‡∏≤‡πÄ‡∏õ‡πà‡∏¢",
                    "‡∏Ñ‡∏µ‡∏ä‡∏≠‡∏ô",
                    "‡∏Ñ‡∏≤‡∏ß‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏£‡πå ‡∏Ñ‡∏¥‡∏á ‡∏ä‡∏≤‡∏•‡∏™‡πå ‡∏™‡πÅ‡∏õ‡πÄ‡∏ô‡∏µ‡∏¢‡∏•",
                    "‡∏Ñ‡∏≤‡∏ô‡∏≤‡∏£‡∏µ ‡∏î‡πá‡∏≠‡∏Å",
                    "‡∏Ñ‡∏≠‡πÄ‡∏Ñ‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô ‡πÄ‡∏ä‡∏û‡πÄ‡∏û‡∏¥‡∏£‡πå‡∏î",
                    "Wire Fox Terrier",
                    "West Highland White Terrier",
                    "Welsh Terrier",
                    "Welsh Corgi Pembroke",
                    "Weimaraner",
                    "Teacup poodle",
                    "standard poodle",
                    "Spitz",
                    "Siberian Wooly coat",
                    "siberian standard",
                    "Sheepadoodle",
                    "Scottish Terrier",
                    "Schnauzer",
                    "Saarloos Wolfhound",
                    "Rough collie",
                    "Rhodesian Ridgeback",
                    "Puli Hungarian Sheepdog",
                    "Presa Canario",
                    "Poodle Toy",
                    "Pit Bull Terrier",
                    "Pembroke Welsh Corgi",
                    "Norwich Terrier",
                    "Norfolk Terrier",
                    "Miniature smooth fox terrier",
                    "Miniature Schnauzer",
                    "Miniature Dachshund",
                    "Miniature Bull Terrier",
                    "Miniature American Shepherd",
                    "Micro Bulldog",
                    "Maltipoo",
                    "Labradoodle",
                    "italian mastiff",
                    "Irish Setter",
                    "Goldendoodle",
                    "Exotic Bully",
                    "English Cocker Spaniel",
                    "English Bulldog",
                    "Dogue Brasileiro",
                    "czechoslovakian wolfdog",
                    "Coton de tulear",
                    "Cavalier King Charles Spaniel",
                    "Caucasian Shepherd",
                    "Cardigan Welsh Corgi",
                    "Cardigan Corgi",
                    "Brussels Griffon",
                    "Boston Terrier",
                    "Border Collie",
                    "Bichon Havanais",
                    "Bichon Frise",
                    "Belgian Malinois",
                    "Australian Shepherd",
                    "Australian Cattle Dog",
                    "American Bandogge / Bandogge Mastiff",
                    "American Akita",
                    "‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏•‡∏õ‡∏µ",
                    "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå",
                  ].map(
                    (Gene, index) => (
                      <option key={index} value={Gene}>
                        {Gene}
                      </option>
                    )
                  )}
                {editPetType === "‡πÅ‡∏°‡∏ß" &&
                  ["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏µ‡∏¢",
                    "‡∏™‡∏Å‡πá‡∏≠‡∏ï‡∏ï‡∏¥‡∏ä‡πÇ‡∏ü‡∏•‡∏î‡πå",
                    "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô‡∏ä‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏Æ‡∏£‡πå",
                    "‡∏™‡∏ü‡∏¥‡∏á‡∏ã‡πå",
                    "‡πÄ‡∏°‡∏ô‡∏Ñ‡∏π‡∏ô",
                    "‡∏ß‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡∏°‡∏≤‡∏®",
                    "‡πÄ‡∏ö‡∏á‡∏Å‡∏≠‡∏•",
                    "‡∏ö‡∏£‡∏¥‡∏ï‡∏¥‡∏ä‡∏ä‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏Æ‡∏£‡πå",
                    "‡∏≠‡∏∞‡∏ö‡∏¥‡∏™‡∏ã‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô",
                    "‡πÄ‡∏£‡πá‡∏Å‡∏ã‡πå (Devon Rex)",
                    "‡πÄ‡∏£‡πá‡∏Å‡∏ã‡πå (Cornish Rex)",
                    "‡∏™‡πÇ‡∏ô‡∏ß‡πå‡∏ä‡∏π",
                    "‡∏ô‡∏≠‡∏£‡πå‡∏ß‡∏µ‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡πÄ‡∏£‡∏™‡∏ï‡πå",
                    "‡∏£‡∏¥‡∏Å‡∏î‡∏≠‡∏•‡∏•‡πå",
                    "‡πÄ‡∏≠‡πá‡∏Å‡πÇ‡∏ã‡∏ï‡∏¥‡∏Å‡∏ä‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏Æ‡∏£‡πå",
                    "‡πÇ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏•‡∏ä‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏Æ‡∏£‡πå",
                    "‡∏ä‡∏≤‡∏£‡πå‡πÄ‡∏ó‡∏£‡∏≠‡∏ã‡πå",
                    "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏™",
                    "‡πÑ‡∏ó‡∏¢",
                    "‡∏≠‡∏≠‡∏ã‡∏µ‡πÅ‡∏Ñ‡∏ó",
                    "‡∏ö‡∏≠‡∏°‡πÄ‡∏ö‡∏¢‡πå",
                    "‡∏ã‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏≤‡∏´‡πå",
                    "‡πÅ‡∏°‡∏ô‡∏ã‡πå",
                    "‡∏Ñ‡∏π‡∏£‡∏¥‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡∏ö‡πá‡∏≠‡∏ö‡πÄ‡∏ó‡∏•",
                    "‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô‡∏ö‡∏•‡∏π",
                    "‡πÅ‡∏£‡πá‡∏Å‡∏≤‡∏°‡∏±‡∏ü‡∏ü‡∏¥‡∏ô",
                    "‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏£‡πå‡∏°",
                    "‡πÅ‡∏ö‡∏•‡∏•‡∏¥‡πÄ‡∏ô‡∏™",
                    "‡∏Æ‡∏≤‡∏ß‡∏≤‡∏ô‡∏≤ ‡∏ö‡∏£‡∏≤‡∏ß‡∏ô‡πå",
                    "‡πÇ‡∏ó‡∏ô‡∏Å‡∏¥‡∏ô‡∏µ‡∏™",
                    "‡πÇ‡∏ã‡πÇ‡∏Å‡πÄ‡∏Å",
                    "‡∏ó‡∏≠‡∏¢‡πÄ‡∏Å‡∏≠‡∏£‡πå",
                    "‡πÄ‡∏ã‡πÄ‡∏£‡∏ô‡πÄ‡∏Å‡∏ï‡∏¥",
                    "‡πÄ‡∏Ñ‡∏≤‡πÄ‡∏ä‡∏µ‡∏¢‡∏ô‡∏ö‡πá‡∏≠‡∏ö‡πÄ‡∏ó‡∏•",
                    "‡∏ã‡∏¥‡∏á‡∏Å‡∏≤‡∏õ‡∏π‡∏£‡∏≤",
                    "‡πÄ‡∏à‡πÅ‡∏õ‡∏ô‡∏ô‡∏µ‡∏™‡∏ö‡πá‡∏≠‡∏ö‡πÄ‡∏ó‡∏•",
                    "‡πÑ‡∏•‡πÇ‡∏Ñ‡∏≠‡∏¥",
                    "‡∏û‡∏¥‡∏Å‡∏ã‡∏µ‡∏ö‡πá‡∏≠‡∏ö",
                    "‡∏°‡∏±‡∏á‡∏Å‡πå‡∏Å‡∏µ‡πâ‡∏ü‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏™‡∏ï‡πå",
                    "‡πÄ‡∏î‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏¥‡∏á‡∏ã‡πå",
                    "‡∏ö‡∏π‡∏£‡πå‡πÅ‡∏°‡∏™",
                    "‡πÅ‡∏Ñ‡∏•‡∏¥‡∏ü‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏µ‡∏¢ ‡∏™‡πÄ‡∏õ‡∏µ‡∏¢‡∏•",
                    "‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡πå‡∏™",
                  ].map(
                    (Gene, index) => (
                      <option key={index} value={Gene}>
                        {Gene}
                      </option>
                    )
                  )}
              </select>
            </div>
            <div class="input-note text-red-500">*‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡πÄ‡∏û‡∏®:
                  </label>
                  <div className="flex space-x-6">
                    {["‡∏ú‡∏π‡πâ", "‡πÄ‡∏°‡∏µ‡∏¢"].map((sex) => (
                      <button
                        key={sex}
                        onClick={() => setPetSex(sex)}
                        className={`px-4 py-2 rounded-md ${
                          petSex === sex
                            ? "bg-color-b text-white"
                            : "bg-gray-200 text-gray-700"
                        }`}
                      >
                        {sex}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>{" "}
                  <input
                    type="text"
                    value={petWeight}
                    onChange={(e) => setPetWeight(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>
                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô:
                  </label>
                  <input
                    type="text"
                    value={petDisease}
                    onChange={(e) => setPetDisease(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>
                <div className="w-full mb-4">
                  <p className="block text-color-b mb-1 font-sans">
                    ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
                    '‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'
                  </p>
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>
                  <div className="mb-2">
                    <label className="mr-4 text-color-b font-sans">
                      <input
                        type="radio"
                        name="birthdateOption"
                        value="approximate"
                        checked={birthdateOption === "approximate"}
                        onChange={() => setBirthdateOption("approximate")}
                        className="mr-2 "
                      />
                      ‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                    </label>
                    <label className="text-color-b font-sans">
                      <input
                        type="radio"
                        name="birthdateOption"
                        value="exact"
                        checked={birthdateOption === "exact"}
                        onChange={() => setBirthdateOption("exact")}
                        className="mr-2"
                      />
                      ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î
                    </label>
                  </div>

                  {birthdateOption === "exact" ? (
                    <div className="flex space-x-2">
                      {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô */}
                      <select
                        value={selectedDay}
                        onChange={(e) => setSelectedDay(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                      >
                        <option value="">‡∏ß‡∏±‡∏ô</option>
                        {Array.from({ length: 31 }, (_, i) => (
                          <option key={i + 1} value={i + 1}>
                            {i + 1}
                          </option>
                        ))}
                      </select>

                      {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
                      <select
                        value={selectedMonth}
                        onChange={(e) => setSelectedMonth(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                      >
                        <option value="">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                        {[
                          "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
                          "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
                          "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
                          "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
                          "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
                          "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
                          "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
                          "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
                          "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
                          "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
                          "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
                          "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
                        ].map((month, index) => (
                          <option key={index + 1} value={index + 1}>
                            {month}
                          </option>
                        ))}
                      </select>

                      {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ */}
                      <select
                        value={selectedYear}
                        onChange={(e) => setSelectedYear(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                      >
                        <option value="">‡∏õ‡∏µ</option>
                        {Array.from({ length: 50 }, (_, i) => (
                          <option key={i} value={new Date().getFullYear() - i}>
                            {new Date().getFullYear() - i}
                          </option>
                        ))}
                      </select>
                    </div>
                  ) : (
                    <div className="flex space-x-2">
                      <input
                        type="number"
                        placeholder="‡∏õ‡∏µ"
                        value={ageYears}
                        onChange={(e) => setAgeYears(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                        min="0"
                      />
                      <input
                        type="number"
                        placeholder="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                        value={ageMonths} //////// APOX ‡∏ô‡πà‡πâ‡∏≤
                        onChange={(e) => setAgeMonths(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                        min="0"
                        max="11"
                      />
                    </div>
                  )}
                </div>
                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
                  </label>
                  <textarea
                    value={note}
                    onChange={(e) => setNote(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>
                <button
                  onClick={addPet}
                  className="font-sans w-full bg-color-b text-white p-3 rounded-md mt-4 px-12"
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </button>
              </>
            )}
          </div>

          <div className="lg:w-1/3 w-full lg:pr-8 flex flex-col items-center lg:order-last order-first">
            <div className="relative w-50 h-50 rounded-full flex items-center justify-center mb-10">
              <img
                src={profilePic}
                alt="Profile"
                className="w-64 h-64 rounded-full object-cover justify-self-center transition-opacity "
              />
              <label className="absolute bottom-0 right-0 bg-white p-2 px-3 rounded-full shadow-md cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 flex items-center justify-center text-color-b font-semibold text-sm">
                <FaUpload />
                <input
                  type="file"
                  className="hidden"
                  name="imageFile"
                  onChange={handleProfilePicChange}
                />
              </label>
            </div>
          </div>
        </div>
      </div>

      {/* Delete Popup */}
      {showDeletePopup && (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center ">
          <div className="bg-white p-6 rounded-md w-1/3 text-center">
            <p className="text-lg font-semibold text-color-b mb-4 font-sans">
              üì¢ ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            </p>
            <p className="text-sm text-color-b mb-4 font-sans">
              ‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ
              ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
            </p>
            {/* <input
              type="text"
              placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"
              value={petNameToDelete}
              onChange={(e) => setPetNameToDelete(e.target.value)}
              className="w-full p-3 border-2 border-gray-300 rounded-md mb-4"
            /> */}
            <div className="flex justify-center space-x-10">
              <button
                onClick={delPet}
                className="bg-color-b text-white px-4 py-2 rounded-md font-sans"
              >
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              </button>
              <button
                onClick={() => setShowDeletePopup(false)}
                className="bg-color-b text-white px-4 py-2 rounded-md font-sans"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
      {showNotification && (
        <NotificationPopup onClose={() => setShowNotification(false)} />
      )}
      {ShowNotificationMessage && (
        <NotificationMessagePopup
          onClose={() => setShowNotificationMessage(false)}
        />
      )}
    </div>
  );
};

export default PetProfile;
