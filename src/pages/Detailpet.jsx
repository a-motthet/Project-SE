import React, { useState, useEffect } from "react";
import { FaEdit, FaTrash, FaUpload } from "react-icons/fa";
import mypic from "../images/2.jpg";
import { useParams } from "react-router-dom";
import axios from "axios";
import Axios from "axios";

const NotificationPopup = ({ onClose }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-25">
    <div className="bg-white rounded-lg p-6 shadow-lg w-80 text-center">
      <h2 className="text-color-b text-lg font-bold mb-2">üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
      <p className="text-color-b mb-4">‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</p>
      <button
        onClick={() => onClose()}
        className="bg-color-b text-white px-4 py-2 rounded-md"
      >
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      </button>
    </div>
  </div>
);

const NotificationMessagePopup = ({ onClose }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-25">
    <div className="bg-white rounded-lg p-6 shadow-lg w-80 text-center">
      <h2 className="text-color-b text-lg font-bold mb-2">üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
      <p className="text-color-b mb-4">‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</p>
      <button
        onClick={() => onClose()}
        className="bg-color-b text-white px-4 py-2 rounded-md"
      >
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      </button>
    </div>
  </div>
);

const PetProfile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [showDeletePopup, setShowDeletePopup] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [ShowNotificationMessage, setShowNotificationMessage] = useState(false);
  const [petName, setPetName] = useState("‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢");
  const [petType, setPetType] = useState("‡πÅ‡∏°‡∏ß");
  const [petSex, setPetSex] = useState("‡∏ú‡∏π‡πâ");
  const [petAge, setPetAge] = useState("2 ‡∏õ‡∏µ");
  const [petWeight, setPetWeight] = useState("200 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°");
  const [birthdate, setBirthdate] = useState("");
  const [note, setNote] = useState("‡∏ô‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏≠‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á ‡∏°‡∏≤‡∏£‡∏µ‡πà");
  const [editPetType, setEditPetType] = useState(petType);
  const [showWeightInput, setShowWeightInput] = useState(false);
  const [birthdateOption, setBirthdateOption] = useState("exact");
  const [selectedDay, setSelectedDay] = useState("");
  const [selectedMonth, setSelectedMonth] = useState("");
  const [selectedYear, setSelectedYear] = useState("");
  const [ageYears, setAgeYears] = useState("");
  const [ageMonths, setAgeMonths] = useState("");
  const [profilePic, setProfilePic] = useState(mypic);
  const [petNameToDelete, setPetNameToDelete] = useState("");
  const { id } = useParams(); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ id ‡∏à‡∏≤‡∏Å URL
  const [pet, setPet] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
  const [error, setError] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö Error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const [dbbirthdate, setDbbirthdate] = useState("");

  const addPet = () => {
    const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Local Storage

    const formData = new FormData(); // ‡πÉ‡∏ä‡πâ FormData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
    formData.append("petName", petName);
    formData.append("petType", editPetType);
    formData.append("petSex", petSex);
    formData.append("petWeight", petWeight);
    formData.append("birthdate", dbbirthdate);
    formData.append("note", note);
    // formData.append("imageFile", profilePic); // profilePic ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ Base64

    Axios.post(`http://localhost:3001/pets/${id}`, formData, {
      headers: {
        Authorization: `Bearer ${token}`, // ‡πÅ‡∏ô‡∏ö Token ‡πÉ‡∏ô Header
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      },
    })
      .then(() => {
        console.log("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        NotificationPopup(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      })
      .catch((error) => {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ", error);
        NotificationMessagePopup(
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
        NotificationMessagePopup(true); // ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      });
  };

  const calculateAge = (birthdate) => {
    const birth = new Date(birthdate);
    const today = new Date();

    let ageYears = today.getFullYear() - birth.getFullYear();
    let ageMonths = today.getMonth() - birth.getMonth();

    if (ageMonths < 0) {
      ageYears--;
      ageMonths += 13;
    }

    return { ageYears, ageMonths };
  };

  const toggleEditMode = () => {
    if (isEditing) {
      setPetType(editPetType);
      setPetWeight(petWeight);
      setShowNotification(true);
    }
    setIsEditing(!isEditing);
  };

  const handleDelete = () => {
    if (petNameToDelete === petName) {
      setShowNotificationMessage(true);
      setShowDeletePopup(false);
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
  };

  const handleProfilePicChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => setProfilePic(reader.result);
      reader.readAsDataURL(file);
    }
  };

  useEffect(() => {
    if (
      birthdateOption === "exact" &&
      selectedDay &&
      selectedMonth &&
      selectedYear
    ) {
      const formattedBirthdate = new Date(
        selectedYear,
        selectedMonth - 1,
        selectedDay
      );

      setBirthdate(formattedBirthdate.toLocaleDateString("th-TH")); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
      const { ageYears, ageMonths } = calculateAge(formattedBirthdate);
      const dbDate = formattedBirthdate.toISOString().split("T")[0];
      setDbbirthdate(dbDate);

      setPetAge(`${ageYears} ‡∏õ‡∏µ ${ageMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`);
    }
  }, [selectedDay, selectedMonth, selectedYear, birthdateOption]);

  useEffect(() => {
    if (birthdateOption === "approximate" && ageYears && ageMonths) {
      setPetAge(`${ageYears} ‡∏õ‡∏µ ${ageMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`);
    }
  }, [ageYears, ageMonths, birthdateOption]);

  useEffect(() => {
    const fetchPet = async () => {
      try {
        const token = localStorage.getItem("token"); // ‡∏î‡∏∂‡∏á Token
        const response = await axios.get(`http://localhost:3001/pets/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setPet(response.data); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏ô State
      } catch (err) {
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ");
      }
    };

    fetchPet();
  }, [id]);

  if (error) {
    return <p className="text-red-500">{error}</p>;
  }

  if (!pet) {
    return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
  }

  const formatter = new Intl.DateTimeFormat("th-TH", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });

  const formatDate = (dateString) => {
    const options = { year: "numeric", month: "long", day: "numeric" }; // ‡πÄ‡∏ä‡πà‡∏ô 26 November 2024
    return new Date(dateString).toLocaleDateString("th-TH", options);
  };

  function calculatePetAge(birthDateString) {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô Date object
    const birthDate = new Date(birthDateString);
    const currentDate = new Date(); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
    let age = currentDate.getFullYear() - birthDate.getFullYear();
    const monthDifference = currentDate.getMonth() - birthDate.getMonth();
    const dayDifference = currentDate.getDate() - birthDate.getDate();

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
    if (monthDifference < 0 || (monthDifference === 0 && dayDifference < 0)) {
      age--;
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedBirthDate = formatter.format(birthDate);

    return {
      age,
      formattedBirthDate,
    };
  }

  const petInfo = calculatePetAge(pet[0].pet_birthdate);

  return (
    <div className="bg-[#EBE4F2]  flex flex-col items-start">
      <div className="container mx-auto p-8 flex flex-col items-center">
        <div className="p-9 bg-white rounded-lg shadow-xl flex flex-col lg:flex-row items-center w-full sm:w-3/5 lg:w-3/5">
          {/* Content Section */}
          <div className="lg:w-2/3 w-full lg:pr-8 flex flex-col items-start">
            {!isEditing ? (
              <>
                <div className="bg-white w-11/12 lg:w-3/4 xl:w-2/3">
                  <p className="pl-8 pt-8 text-color-b text-3xl font-bold">
                    {pet[0].pet_name}
                  </p>
                  <div className="grid grid-cols-2 gap-5 mb-2">
                    <div className="ml-8 text-color-b">
                      ‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_breed}
                    </div>
                    <div className="text-color-b">
                      ‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå: {pet[0].pet_gender}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-5 mb-2">
                    <div className="ml-8 text-color-b">
                      ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {petInfo.age} ‡∏õ‡∏µ
                    </div>
                    <div className="text-color-b ">
                      ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
                    </div>
                  </div>
                  <div className="grid grid-cols-1 mb-2">
                    <div className="ml-8 text-color-b">
                      ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß: {pet[0].pet_disease}
                    </div>
                  </div>
                </div>
                {/* <h2 className="text-color-b text-2xl font-sans font-bold mb-6">
                  {pet[0].pet_name} :
                </h2>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {pet[0].pet_breed} ‡πÄ‡∏û‡∏®: {pet[0].pet_gender}
                </p>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {formatDate(pet[0].pet_birthdate)}
                </p>
                <p className="text-xl text-color-b font-sans">
                  ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á: {petInfo.age} ‡∏õ‡∏µ
                </p>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {pet[0].pet_weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
                </p>
                <p className="text-xl text-color-b font-sans">
                  {" "}
                  Note: {pet[0].pet_note || "-"}
                </p> */}
                <div className="flex space-x-2 w-full mt-20 items-end">
                  <button
                    onClick={toggleEditMode}
                    className="flex-1 bg-color-b text-white p-3 rounded-md"
                  >
                    <FaEdit className="inline mr-2" /> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  <button
                    onClick={() => setShowDeletePopup(true)}
                    className="flex-1 bg-color-b text-white p-3 rounded-md"
                  >
                    <FaTrash className="inline mr-2" /> ‡∏•‡∏ö
                  </button>
                </div>
              </>
            ) : (
              <>
                {/* Editing Form */}
                <h2 className="text-color-b text-lg font-sans font-bold mb-4">
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô
                </h2>
                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans ">
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>
                  <input
                    type="text"
                    value={petName}
                    onChange={(e) => setPetName(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>
                  <div className="flex space-x-6 ">
                    {["‡∏´‡∏°‡∏≤", "‡πÅ‡∏°‡∏ß"].map((type) => (
                      <button
                        key={type}
                        onClick={() => setEditPetType(type)}
                        className={`px-4 py-2 rounded-md ${
                          editPetType === type
                            ? "bg-color-b text-white"
                            : "bg-gray-200 text-gray-700"
                        }`}
                      >
                        {type}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡πÄ‡∏û‡∏®:
                  </label>
                  <div className="flex space-x-6">
                    {["‡∏ú‡∏π‡πâ", "‡πÄ‡∏°‡∏µ‡∏¢"].map((sex) => (
                      <button
                        key={sex}
                        onClick={() => setPetSex(sex)}
                        className={`px-4 py-2 rounded-md ${
                          petSex === sex
                            ? "bg-color-b text-white"
                            : "bg-gray-200 text-gray-700"
                        }`}
                      >
                        {sex}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>{" "}
                  <input
                    type="text"
                    value={petWeight}
                    onChange={(e) => setPetWeight(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>
                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô:
                  </label>
                  <input
                    type="text"
                    placeholder="‡πÇ‡∏õ‡∏£‡∏î‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"
                    name="pet_disease"
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>
                <div className="w-full mb-4">
                  <p className="block text-color-b mb-1 font-sans">
                    ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
                    '‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'
                  </p>
                </div>

                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á:
                  </label>
                  <div className="mb-2">
                    <label className="mr-4 text-color-b font-sans">
                      <input
                        type="radio"
                        name="birthdateOption"
                        value="approximate"
                        checked={birthdateOption === "approximate"}
                        onChange={() => setBirthdateOption("approximate")}
                        className="mr-2 "
                      />
                      ‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                    </label>
                    <label className="text-color-b font-sans">
                      <input
                        type="radio"
                        name="birthdateOption"
                        value="exact"
                        checked={birthdateOption === "exact"}
                        onChange={() => setBirthdateOption("exact")}
                        className="mr-2"
                      />
                      ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î
                    </label>
                  </div>

                  {birthdateOption === "exact" ? (
                    <div className="flex space-x-2">
                      {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô */}
                      <select
                        value={selectedDay}
                        onChange={(e) => setSelectedDay(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                      >
                        <option value="">‡∏ß‡∏±‡∏ô</option>
                        {Array.from({ length: 31 }, (_, i) => (
                          <option key={i + 1} value={i + 1}>
                            {i + 1}
                          </option>
                        ))}
                      </select>

                      {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
                      <select
                        value={selectedMonth}
                        onChange={(e) => setSelectedMonth(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                      >
                        <option value="">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                        {[
                          "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
                          "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
                          "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
                          "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
                          "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
                          "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
                          "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
                          "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
                          "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
                          "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
                          "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
                          "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
                        ].map((month, index) => (
                          <option key={index + 1} value={index + 1}>
                            {month}
                          </option>
                        ))}
                      </select>

                      {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ */}
                      <select
                        value={selectedYear}
                        onChange={(e) => setSelectedYear(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                      >
                        <option value="">‡∏õ‡∏µ</option>
                        {Array.from({ length: 50 }, (_, i) => (
                          <option key={i} value={new Date().getFullYear() - i}>
                            {new Date().getFullYear() - i}
                          </option>
                        ))}
                      </select>
                    </div>
                  ) : (
                    <div className="flex space-x-2">
                      <input
                        type="number"
                        placeholder="‡∏õ‡∏µ"
                        value={ageYears}
                        onChange={(e) => setAgeYears(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                        min="0"
                      />
                      <input
                        type="number"
                        placeholder="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                        value={ageMonths}
                        onChange={(e) => setAgeMonths(e.target.value)}
                        className="w-1/3 p-3 border-2 border-gray-300 rounded-md"
                        min="0"
                        max="11"
                      />
                    </div>
                  )}
                </div>
                <div className="w-full mb-4">
                  <label className="block text-color-b mb-1 font-sans">
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
                  </label>
                  <textarea
                    value={note}
                    onChange={(e) => setNote(e.target.value)}
                    className="w-full p-3 border-2 border-gray-300 rounded-md"
                  />
                </div>
                <button
                  onClick={addPet}
                  className="font-sans w-full bg-color-b text-white p-3 rounded-md mt-4 px-12"
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </button>
              </>
            )}
          </div>

          <div className="lg:w-1/3 w-full lg:pr-8 flex flex-col items-center lg:order-last order-first">
            <div className="relative w-50 h-50 rounded-full flex items-center justify-center mb-10">
              <img
                src={pet[0].pet_photo}
                alt="Profile"
                className="w-full h-full rounded-full object-cover"
              />
              <label className="absolute bottom-0 right-0 bg-white p-2 px-3 rounded-full shadow-md cursor-pointer transition-transform duration-200 ease-in-out hover:scale-105 active:scale-95 flex items-center justify-center text-color-b font-semibold text-sm">
                <FaUpload />
                <input
                  type="file"
                  onChange={handleProfilePicChange}
                  className="hidden"
                />
              </label>
            </div>
          </div>
        </div>
      </div>

      {/* Delete Popup */}
      {showDeletePopup && (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center ">
          <div className="bg-white p-6 rounded-md w-1/3 text-center">
            <p className="text-lg font-semibold text-color-b mb-4 font-sans">
              üì¢ ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            </p>
            <p className="text-sm text-color-b mb-4 font-sans">
              ‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ
              ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
              ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            </p>
            <input
              type="text"
              placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"
              value={petNameToDelete}
              onChange={(e) => setPetNameToDelete(e.target.value)}
              className="w-full p-3 border-2 border-gray-300 rounded-md mb-4"
            />
            <div className="flex justify-center space-x-10">
              <button
                onClick={handleDelete}
                className="bg-color-b text-white px-4 py-2 rounded-md font-sans"
              >
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              </button>
              <button
                onClick={() => setShowDeletePopup(false)}
                className="bg-color-b text-white px-4 py-2 rounded-md font-sans"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
      {showNotification && (
        <NotificationPopup onClose={() => setShowNotification(false)} />
      )}
      {ShowNotificationMessage && (
        <NotificationMessagePopup
          onClose={() => setShowNotificationMessage(false)}
        />
      )}
    </div>
  );
};

export default PetProfile;
